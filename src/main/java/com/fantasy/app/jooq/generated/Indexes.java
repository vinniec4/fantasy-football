/*
 * This file is generated by jOOQ.
 */
package com.fantasy.app.jooq.generated;


import com.fantasy.app.jooq.generated.tables.Players;
import com.fantasy.app.jooq.generated.tables.Teams;
import org.jooq.Index;
import org.jooq.OrderField;
import org.jooq.impl.Internal;


/**
 * A class modelling indexes of tables of the <code>fantasy_football</code> 
 * schema.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Indexes {

    // -------------------------------------------------------------------------
    // INDEX definitions
    // -------------------------------------------------------------------------

    public static final Index PLAYERS_ID_UINDEX = Indexes0.PLAYERS_ID_UINDEX;
    public static final Index PLAYERS_NAME_INDEX = Indexes0.PLAYERS_NAME_INDEX;
    public static final Index PLAYERS_TEAM_INDEX = Indexes0.PLAYERS_TEAM_INDEX;
    public static final Index TEAMS_ID_UINDEX = Indexes0.TEAMS_ID_UINDEX;
    public static final Index TEAMS_NAME_INDEX = Indexes0.TEAMS_NAME_INDEX;

    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Indexes0 {
        public static Index PLAYERS_ID_UINDEX = Internal.createIndex("players_id_uindex", Players.PLAYERS, new OrderField[] { Players.PLAYERS.ID }, true);
        public static Index PLAYERS_NAME_INDEX = Internal.createIndex("players_name_index", Players.PLAYERS, new OrderField[] { Players.PLAYERS.NAME }, false);
        public static Index PLAYERS_TEAM_INDEX = Internal.createIndex("players_team_index", Players.PLAYERS, new OrderField[] { Players.PLAYERS.TEAM_ID }, false);
        public static Index TEAMS_ID_UINDEX = Internal.createIndex("teams_id_uindex", Teams.TEAMS, new OrderField[] { Teams.TEAMS.ID }, true);
        public static Index TEAMS_NAME_INDEX = Internal.createIndex("teams_name_index", Teams.TEAMS, new OrderField[] { Teams.TEAMS.NAME }, false);
    }
}
